# ICRAR - International Centre for Radio Astronomy Research
# (c) UWA - The University of Western Australia, 2019
# Copyright by UWA (in the framework of the ICRAR)
# All rights reserved
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307  USA

image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
- lint
- build
- test
- publish
- scan

# # Include CI templates
# include:
# # OCI Images
#   - project: 'ska-telescope/templates-repository'
#     file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'


# Include CI templates
include:
# OCI Images
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image-build.gitlab-ci.yml'


.container-scanning:
  stage: scan
  tags:
    - k8srunner
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
  allow_failure: true
  before_script:
  - |
    apk add bash make curl
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

# Executed on the image from the gitlab registry
container scanning for MRs:
  extends:
    - .container-scanning
  script:
    - make oci-scan-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
    # - make oci-scan OCI_IMAGE=${CI_PROJECT_NAME} CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  rules:
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH' # Run on push, not default branch - avoid detached
    exists:
      - Dockerfile
      - images/**/*

# Executed on the image from the CAR
container scanning for default branch:
  extends:
    - .container-scanning
  script:
    - make oci-scan-all CAR_OCI_REGISTRY_HOST=${CAR_OCI_REGISTRY_HOST}
    # - make oci-scan OCI_IMAGE=${CI_PROJECT_NAME} CAR_OCI_REGISTRY_HOST=${CAR_OCI_REGISTRY_HOST}
  rules:
  - if: $FULL_IMAGE_NAME # Run if triggered externally
    variables:
      OVERRIDE_FULL_IMAGE_NAME: "true"
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH # Run on default branch
    exists:
      - Dockerfile
      - images/**/*
  - if: $CI_COMMIT_TAG # Run on tags
    exists:
      - Dockerfile
      - images/**/*
